### Parameters (choose wisely) ###
random_seed <- 43
num_cells <- 1000
num_genes <- 50
num_groups <- 10
dropout <- 0 #boolean valued for now
dropout.mid.value <- 0
dropout.shape.value <- -1
PATHNAME <- "/Users/nikhil/Documents/College/Math 651/ZoomDeflate/SplatGenData/two_cell_types_50_sparse/"
### Run simulation ###
params <- newSplatParams()
params <- setParam(params, "seed", random_seed)
params <- setParam(params, "batchCells", num_cells)
params <- setParam(params, "nGenes", num_genes)
if(num_groups > 1) {
# Uniformly distributed groups
probabilities = rep(1/num_groups, num_groups)
params <- setParam(params, "group.prob", probabilities)
if (dropout) {
dropout.mid = rep(dropout.mid.value, num_groups) #default, possibly a bad assumption
dropout.shape = rep(dropout.shape.value, num_groups) #default, possibly a bad assumption
params <- setParam(params, "dropout.mid", dropout.mid)
params <- setParam(params, "dropout.shape", dropout.shape)
params <- setParam(params, "dropout.type", "group")
}
sim <- splatSimulate(params, method = "group")
} else {
if (dropout) {
params <- setParam(params, "dropout.mid", dropout.mid.value)
params <- setParam(params, "dropout.shape", dropout.shape.value)
params <-setParam(params, "dropout.type", "experiment")
}
sim <- splatSimulate(params)
}
sum(rowSums(counts(sim) == 0))
library(splatter)
### Parameters (choose wisely) ###
random_seed <- 43
num_cells <- 1000
num_genes <- 50
num_groups <- 10
dropout <- 0 #boolean valued for now
dropout.mid.value <- 0
dropout.shape.value <- -1
PATHNAME <- "/Users/nikhil/Documents/College/Math 651/ZoomDeflate/SplatGenData/two_cell_types_50_sparse/"
### Run simulation ###
params <- newSplatParams()
params <- setParam(params, "seed", random_seed)
params <- setParam(params, "batchCells", num_cells)
params <- setParam(params, "nGenes", num_genes)
if(num_groups > 1) {
# Uniformly distributed groups
probabilities = rep(1/num_groups, num_groups)
params <- setParam(params, "group.prob", probabilities)
if (dropout) {
dropout.mid = rep(dropout.mid.value, num_groups) #default, possibly a bad assumption
dropout.shape = rep(dropout.shape.value, num_groups) #default, possibly a bad assumption
params <- setParam(params, "dropout.mid", dropout.mid)
params <- setParam(params, "dropout.shape", dropout.shape)
params <- setParam(params, "dropout.type", "group")
}
sim <- splatSimulate(params, method = "group")
} else {
if (dropout) {
params <- setParam(params, "dropout.mid", dropout.mid.value)
params <- setParam(params, "dropout.shape", dropout.shape.value)
params <-setParam(params, "dropout.type", "experiment")
}
sim <- splatSimulate(params)
}
sum(rowSums(counts(sim) == 0))
library(splatter)
### Parameters (choose wisely) ###
random_seed <- 43
num_cells <- 1000
num_genes <- 500
num_groups <- 10
dropout <- 0 #boolean valued for now
dropout.mid.value <- 0
dropout.shape.value <- -1
PATHNAME <- "/Users/nikhil/Documents/College/Math 651/ZoomDeflate/SplatGenData/two_cell_types_50_sparse/"
### Run simulation ###
params <- newSplatParams()
params <- setParam(params, "seed", random_seed)
params <- setParam(params, "batchCells", num_cells)
params <- setParam(params, "nGenes", num_genes)
if(num_groups > 1) {
# Uniformly distributed groups
probabilities = rep(1/num_groups, num_groups)
params <- setParam(params, "group.prob", probabilities)
if (dropout) {
dropout.mid = rep(dropout.mid.value, num_groups) #default, possibly a bad assumption
dropout.shape = rep(dropout.shape.value, num_groups) #default, possibly a bad assumption
params <- setParam(params, "dropout.mid", dropout.mid)
params <- setParam(params, "dropout.shape", dropout.shape)
params <- setParam(params, "dropout.type", "group")
}
sim <- splatSimulate(params, method = "group")
} else {
if (dropout) {
params <- setParam(params, "dropout.mid", dropout.mid.value)
params <- setParam(params, "dropout.shape", dropout.shape.value)
params <-setParam(params, "dropout.type", "experiment")
}
sim <- splatSimulate(params)
}
sum(rowSums(counts(sim) == 0))
library(splatter)
### Parameters (choose wisely) ###
random_seed <- 43
num_cells <- 1000
num_genes <- 5000
num_groups <- 10
dropout <- 0 #boolean valued for now
dropout.mid.value <- 0
dropout.shape.value <- -1
PATHNAME <- "/Users/nikhil/Documents/College/Math 651/ZoomDeflate/SplatGenData/two_cell_types_50_sparse/"
### Run simulation ###
params <- newSplatParams()
params <- setParam(params, "seed", random_seed)
params <- setParam(params, "batchCells", num_cells)
params <- setParam(params, "nGenes", num_genes)
if(num_groups > 1) {
# Uniformly distributed groups
probabilities = rep(1/num_groups, num_groups)
params <- setParam(params, "group.prob", probabilities)
if (dropout) {
dropout.mid = rep(dropout.mid.value, num_groups) #default, possibly a bad assumption
dropout.shape = rep(dropout.shape.value, num_groups) #default, possibly a bad assumption
params <- setParam(params, "dropout.mid", dropout.mid)
params <- setParam(params, "dropout.shape", dropout.shape)
params <- setParam(params, "dropout.type", "group")
}
sim <- splatSimulate(params, method = "group")
} else {
if (dropout) {
params <- setParam(params, "dropout.mid", dropout.mid.value)
params <- setParam(params, "dropout.shape", dropout.shape.value)
params <-setParam(params, "dropout.type", "experiment")
}
sim <- splatSimulate(params)
}
sum(rowSums(counts(sim) == 0))
